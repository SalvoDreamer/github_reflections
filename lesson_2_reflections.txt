What happens when you initialize a repository? Why do you need to do it?

	When we initialize a repository we create a .git file that track the history of our directory.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	Staging area is the place where you can put and check all your updates before commit; it's usefull because you can put all the stuff and changes in the staging area before you get a "logical change".

How can you use the staging area to make sure you have one commit per logical change?

	By adding file from Working directory to staging area and check the difference with the git diff command.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	For example when you want to create a fresh new features of your project or a different mode to use it (different difficulty level, for a game). Branches can separe the development of different type of application.

How do the diagrams help you visualize the branch structure?

	It helps with the reachability of different commits

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	When we merge 2 branches, git automatically merge the 2 version of file in one version (if there isn't problem).

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

	If there isn't conflicts in our code, Automatic-merge is a good features, meanwhile when we have any conflicts, it's nice to find manually the conflict

